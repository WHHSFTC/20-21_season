package org.firstinspires.ftc.teamcode.switchboard.core

import org.firstinspires.ftc.teamcode.switchboard.event.Envelope
import org.firstinspires.ftc.teamcode.switchboard.event.FrameEvent
import org.firstinspires.ftc.teamcode.switchboard.scheduler.Activity
import org.firstinspires.ftc.teamcode.switchboard.scheduler.Schedule
import org.firstinspires.ftc.teamcode.switchboard.shapes.BackingList
import org.firstinspires.ftc.teamcode.switchboard.shapes.Time

class Switchboard(val schedule: Schedule, queue: BackingList<Envelope<*>>.SharedQueue) : Activity(queue) {
    // list of Activities generated by the schedule for maintenance (eg updating control loops' state) without writing to hardware
    val activities: List<Activity> = schedule.makeList().distinct()
    private var time: Time = Time.now()

    override fun load() {
        activities.forEach { it.load() }
    }

    override fun maintain() {
        val t = Time.now()
        //send(FrameEvent(1, t, t - time))
        time = t

        // iterates through the event queue for each Activity
        activities.forEach { it.handleEvents() }

        // updates state without blocking
        activities.forEach { it.maintain() }
    }

    override fun update() {
        // runs selected Activities, including hardware calls
        schedule.select { it.update() }
    }

    override fun cleanup() {
        // cleans up for the stop of the OpMode (powers off all motors, etc)
        activities.forEach { it.cleanup() }
    }
}