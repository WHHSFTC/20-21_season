package org.firstinspires.ftc.teamcode.switchboard.core

import org.firstinspires.ftc.teamcode.switchboard.event.Envelope
import org.firstinspires.ftc.teamcode.switchboard.scheduler.Activity
import org.firstinspires.ftc.teamcode.switchboard.scheduler.Schedule
import org.firstinspires.ftc.teamcode.switchboard.shapes.BackingList

class Switchboard(val schedule: Schedule) {
    // list of Activities generated by the schedule for maintenance (eg updating control loops' state) without writing to hardware
    val activities: List<Activity> = schedule.makeList().distinct()

    // backing list for all Activities event queues
    val eventBus: BackingList<Envelope> = BackingList<Envelope>()

    fun init() {
        activities.forEach { it.load() }
    }

    fun update() {
        // iterates through the event queue for each Activity
        activities.forEach { it.handleEvents() }

        // updates state without blocking
        activities.forEach { it.maintain() }

        // runs selected Activities, including hardware calls
        schedule.select { it.update() }

        // frees any events that have already been processed by all
        eventBus.refresh()
    }

    fun cleanup() {
        // cleans up for the stop of the OpMode (powers off all motors, etc)
        activities.forEach { it.cleanup() }
    }
}